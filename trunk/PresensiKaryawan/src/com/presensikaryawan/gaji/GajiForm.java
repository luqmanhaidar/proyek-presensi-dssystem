package com.presensikaryawan.gaji;

import com.dssystem.umum.ComponentFocus;
import com.presensikaryawan.golongan.*;
import com.presensikaryawan.karyawan.Karyawan;
import com.presensikaryawan.tools.DaoFactory;
import com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel;
import java.awt.Color;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * masterInventoryGrup.java
 *
 * Created on October 21, 2006, 10:06 AM
 */
/**
 *
 * @author Als
 */
public class GajiForm extends javax.swing.JFrame {

    private DaoFactory service;
    private Gaji activeGaji;

    /**
     * Creates new form masterInventoryGrup
     */
    public GajiForm() throws SQLException {
        initComponents();
        UIManager.put("nimbusBase", new Color(204, 204, 255));
//        UIManager.put("nimbusControl",new Color(153,255,153));
//        UIManager.put("nimbusBlueGrey", new Color(204,204,255));
//        Tampilan();
        // isitable();
        initComponentFocus();
        GajiDao dao = DaoFactory.getGajiDao();
        List<Gaji> gajis = dao.getAllGaji();

        String checkerDuplication = null;
        for (Gaji g : gajis) {
            if (!g.getGolongan().getKodeGolongan().equals(checkerDuplication)) {
                kodeGolonganCombo.addItem(g.getGolongan().getKodeGolongan());
                checkerDuplication = g.getGolongan().getKodeGolongan();
            }

        }
        List<Gaji> gajis2 = dao.getAllGajiByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        nipCombo.removeAllItems();
        GajiTableModel model = new GajiTableModel(gajis2);
        gajiTable.setModel(model);
        List<Karyawan> karyawans = DaoFactory.getKaryawanDao().getAllKaryawanByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        for (Karyawan k : karyawans) {
            nipCombo.addItem(k.getNip());
        }

    }

    private void initComponentFocus() {
        nipCombo.addFocusListener(new ComponentFocus(nipCombo));
        kodeGolonganCombo.addFocusListener(new ComponentFocus(kodeGolonganCombo));
        simpanButton.addFocusListener(new ComponentFocus(simpanButton));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        headPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        menuLabel = new javax.swing.JLabel();
        fungsiLabel = new javax.swing.JLabel();
        panelStatus1 = new com.sistem.panelstatus.PanelStatus();
        cmdKeluar = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        nipLabel = new javax.swing.JLabel();
        kodeGolonganLabel = new javax.swing.JLabel();
        gajiPokokTextField = new javax.swing.JTextField();
        simpanButton = new javax.swing.JButton();
        kodeGolonganCombo = new javax.swing.JComboBox();
        hapusButton = new javax.swing.JButton();
        batalButton = new javax.swing.JButton();
        nipCombo = new javax.swing.JComboBox();
        uangMakanTextField = new javax.swing.JTextField();
        uangLemburTextField = new javax.swing.JTextField();
        gajiPokokLabel = new javax.swing.JLabel();
        uangMakanLabel = new javax.swing.JLabel();
        uangLemburLabel = new javax.swing.JLabel();
        gajiPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gajiTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Data Kategori");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jDesktopPane1.setBackground(new java.awt.Color(153, 255, 153));
        jDesktopPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        headPanel.setBackground(new java.awt.Color(255, 255, 255));

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logosimtel.jpg"))); // NOI18N

        menuLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        menuLabel.setText("Menu Penggajian Karyawan");

        fungsiLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fungsiLabel.setText("Digunakan untuk menambah, edit dan menghapus data gaji karyawan");

        org.jdesktop.layout.GroupLayout headPanelLayout = new org.jdesktop.layout.GroupLayout(headPanel);
        headPanel.setLayout(headPanelLayout);
        headPanelLayout.setHorizontalGroup(
            headPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(headPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(logoLabel)
                .add(4, 4, 4)
                .add(headPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(menuLabel)
                    .add(fungsiLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 437, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(299, Short.MAX_VALUE))
        );
        headPanelLayout.setVerticalGroup(
            headPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(headPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(headPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(logoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(headPanelLayout.createSequentialGroup()
                        .add(menuLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fungsiLabel)))
                .addContainerGap())
        );

        headPanel.setBounds(0, 0, 800, 77);
        jDesktopPane1.add(headPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        panelStatus1.setBounds(0, 590, 800, 50);
        jDesktopPane1.add(panelStatus1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        cmdKeluar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmdKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/24/Exit.gif"))); // NOI18N
        cmdKeluar.setText("Keluar");
        cmdKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdKeluarActionPerformed(evt);
            }
        });
        cmdKeluar.setBounds(680, 540, 110, 40);
        jDesktopPane1.add(cmdKeluar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        inputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        nipLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nipLabel.setText("NIP");

        kodeGolonganLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        kodeGolonganLabel.setText("Kode Golongan");

        gajiPokokTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        gajiPokokTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gajiPokokTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gajiPokokTextFieldActionPerformed(evt);
            }
        });

        simpanButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        simpanButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/24/Save.gif"))); // NOI18N
        simpanButton.setMnemonic('S');
        simpanButton.setText("Simpan");
        simpanButton.setToolTipText("Klik Untuk Simpan");
        simpanButton.setEnabled(false);
        simpanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanButtonActionPerformed(evt);
            }
        });
        simpanButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                simpanButtonKeyPressed(evt);
            }
        });

        kodeGolonganCombo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        kodeGolonganCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kodeGolonganComboActionPerformed(evt);
            }
        });

        hapusButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        hapusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/24/Delete.gif"))); // NOI18N
        hapusButton.setMnemonic('H');
        hapusButton.setText("Hapus");
        hapusButton.setToolTipText("Tombol Untuk Hapus");
        hapusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusButtonActionPerformed(evt);
            }
        });

        batalButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        batalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/24/Undo.gif"))); // NOI18N
        batalButton.setText("Batal");
        batalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalButtonActionPerformed(evt);
            }
        });

        nipCombo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        nipCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nipComboActionPerformed(evt);
            }
        });

        uangMakanTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        uangMakanTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        uangMakanTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uangMakanTextFieldActionPerformed(evt);
            }
        });

        uangLemburTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        uangLemburTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        uangLemburTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uangLemburTextFieldActionPerformed(evt);
            }
        });

        gajiPokokLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gajiPokokLabel.setText("Gaji Pokok");

        uangMakanLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        uangMakanLabel.setText("Uang Makan");

        uangLemburLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        uangLemburLabel.setText("Uang Lembur");

        org.jdesktop.layout.GroupLayout inputPanelLayout = new org.jdesktop.layout.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, nipLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, kodeGolonganLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                    .add(gajiPokokLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(uangMakanLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(uangLemburLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(inputPanelLayout.createSequentialGroup()
                        .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(kodeGolonganCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(nipCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, uangLemburTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, uangMakanTextField)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, gajiPokokTextField)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 130, Short.MAX_VALUE)
                .add(simpanButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hapusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(batalButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(kodeGolonganLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(kodeGolonganCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nipLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nipCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(gajiPokokTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gajiPokokLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(uangMakanTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(uangMakanLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(uangLemburTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(uangLemburLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(simpanButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(batalButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hapusButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        inputPanel.setBounds(0, 70, 800, 260);
        jDesktopPane1.add(inputPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gajiPanel.setBackground(new java.awt.Color(204, 204, 204));
        gajiPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Daftar Gaji"));

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        gajiTable.setAutoCreateRowSorter(true);
        gajiTable.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        gajiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "KODE GOLONGAN", "NIP", "NAMA", "GAJI POKOK", "UANG MAKAN", "UANG LEMBUR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gajiTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gajiTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gajiTable);

        org.jdesktop.layout.GroupLayout gajiPanelLayout = new org.jdesktop.layout.GroupLayout(gajiPanel);
        gajiPanel.setLayout(gajiPanelLayout);
        gajiPanelLayout.setHorizontalGroup(
            gajiPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
        );
        gajiPanelLayout.setVerticalGroup(
            gajiPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(gajiPanelLayout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 41, Short.MAX_VALUE))
        );

        gajiPanel.setBounds(0, 330, 800, 200);
        jDesktopPane1.add(gajiPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDesktopPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jDesktopPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDesktopPane1.getAccessibleContext().setAccessibleName("");
        jDesktopPane1.getAccessibleContext().setAccessibleDescription("");

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-816)/2, (screenSize.height-688)/2, 816, 688);
    }// </editor-fold>//GEN-END:initComponents

    private void hapusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusButtonActionPerformed
        String kodeGolongan = String.valueOf(kodeGolonganCombo.getSelectedItem());
        String nip = String.valueOf(nipCombo.getSelectedItem());
        double gajiPokok = Double.parseDouble(gajiPokokTextField.getText());
        double uangMakan = Double.parseDouble(uangMakanTextField.getText());
        double uangLembur = Double.parseDouble(uangLemburTextField.getText());

        activeGaji.setGajiPokok(gajiPokok);
        activeGaji.setUangMakan(uangMakan);
        activeGaji.setUangLembur(uangLembur);
        Karyawan k = new Karyawan();
        k.setNip(nip);
        activeGaji.setKaryawan(k);
        Golongan g = new Golongan();
        g.setKodeGolongan(kodeGolongan);
        activeGaji.setGolongan(g);

        int ok = JOptionPane.showConfirmDialog(null, "Anda Yakin Akan Menghapus Data Gaji Karyawan\nDengan NIP = " + nip + "", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (ok == 0) {
            try {
                DaoFactory.getGajiDao().delete(activeGaji);
                JOptionPane.showMessageDialog(this, "Data Gaji Berhasil Dihapus Dengan NIP\n"
                        + "<html><font color=#FF0000>" + nip + "</font></html>", "Pemberitahuan", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Data Gagal Dihapus\n"
                        + "<html><font color=#FF0000>" + ex + "</font></html>", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
        batalButton.doClick();
    }//GEN-LAST:event_hapusButtonActionPerformed

    private void gajiTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gajiTableMouseClicked
        int row = gajiTable.getSelectedRow();
        String kodegroup = gajiTable.getValueAt(row, 0).toString();
        String nipgroup = gajiTable.getValueAt(row, 1).toString();
        String gajipokokgroup = gajiTable.getValueAt(row, 3).toString();
        String uangmakangroup = gajiTable.getValueAt(row, 4).toString();
        String uanglemburgroup = gajiTable.getValueAt(row, 5).toString();

        gajiPokokTextField.setText(gajipokokgroup);
        uangMakanTextField.setText(uangmakangroup);
        uangLemburTextField.setText(uanglemburgroup);
        kodeGolonganCombo.setSelectedItem(kodegroup);// TODO add your handling code here:
        nipCombo.setSelectedItem(nipgroup);
    }//GEN-LAST:event_gajiTableMouseClicked
    private void isitable() {
    }

    private void simpanButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_simpanButtonKeyPressed
        simpanButton.doClick();// TODO add your handling code here:
    }//GEN-LAST:event_simpanButtonKeyPressed

    private void simpanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanButtonActionPerformed
        String kodeGolongan = String.valueOf(kodeGolonganCombo.getSelectedItem());
        String nip = String.valueOf(nipCombo.getSelectedItem());
        double gajiPokok = Double.parseDouble(gajiPokokTextField.getText());
        double uangMakan = Double.parseDouble(uangMakanTextField.getText());
        double uangLembur = Double.parseDouble(uangLemburTextField.getText());

        Gaji gajiBaru = new Gaji();
        Karyawan k = new Karyawan();
        try {
            k.setNama(DaoFactory.getKaryawanDao().getByNIPKaryawan(nip).getNama());
        } catch (SQLException e) {
            System.out.println("error");
        }
        System.out.println("nama k: "+k.getNama());
        k.setNip(nip);
        Golongan g = new Golongan();
        g.setKodeGolongan(kodeGolongan);

        gajiBaru.setGajiPokok(gajiPokok);
        gajiBaru.setUangLembur(uangLembur);
        gajiBaru.setUangMakan(uangMakan);
        gajiBaru.setKaryawan(k);
        gajiBaru.setGolongan(g);
        if ("Simpan".equals(simpanButton.getText())) {
            try {
                DaoFactory.getGajiDao().insert(gajiBaru);

                JOptionPane.showMessageDialog(this, "Data dengan Nama \n"
                        + "<html><font color=#FF0000>" + nip + "</font></html>" + "\nBerhasil diSimpan", "Pemberitahuan", JOptionPane.INFORMATION_MESSAGE);

                batalButton2();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                Gaji gajiLama = DaoFactory.getGajiDao().getByKodeGolonganAndNip(kodeGolongan, nip);
                k = DaoFactory.getKaryawanDao().getByNIPKaryawan(nip);

                System.out.println(k.getNip());
                System.out.println(k.getNama());
                g.setKodeGolongan(kodeGolongan);
                gajiLama.setGajiPokok(gajiPokok);
                gajiLama.setUangMakan(uangMakan);
                gajiLama.setUangLembur(uangLembur);
                gajiLama.setGolongan(g);
                gajiLama.setKaryawan(k);

                DaoFactory.getGajiDao().update(gajiLama);
                JOptionPane.showMessageDialog(this, "Data Gaji Karyawan Dengan NIP\n"
                        + "<html><font color=#FF0000>" + nip + "</font></html>" + "\nBerhasil diUpdate", "Pemberitahuan", JOptionPane.INFORMATION_MESSAGE);

                batalButton2();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_simpanButtonActionPerformed

    private void batalButton2() {
        kodeGolonganCombo.requestFocus();
        List<Gaji> gajis2 = null;
        try {
            gajis2 = DaoFactory.getGajiDao().getAllGajiByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        } catch (SQLException ex) {
            Logger.getLogger(GajiForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        GajiTableModel model = new GajiTableModel(gajis2);
        gajiTable.setModel(model);
    }

    private void cmdKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdKeluarActionPerformed

        this.dispose();
}//GEN-LAST:event_cmdKeluarActionPerformed

    private void kodeGolonganComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kodeGolonganComboActionPerformed
        String pilih = String.valueOf(kodeGolonganCombo.getSelectedItem());
        List<Gaji> gajis2 = null;
        try {
            gajis2 = DaoFactory.getGajiDao().getAllGajiByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        nipCombo.removeAllItems();
        GajiTableModel model = new GajiTableModel(gajis2);
        gajiTable.setModel(model);
        List<Karyawan> karyawans=null;
        try {
            karyawans = DaoFactory.getKaryawanDao().getAllKaryawanByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        for (Karyawan k : karyawans) {
            nipCombo.addItem(k.getNip());
        }
        String pilih2 = String.valueOf(nipCombo.getSelectedItem());

        try {
            activeGaji = DaoFactory.getGajiDao().getByKodeGolonganAndNip(pilih, pilih2);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //jika ditemukan
        if (activeGaji != null) {
            gajiPokokTextField.setText(String.valueOf(activeGaji.getGajiPokok()));
            uangLemburTextField.setText(String.valueOf(activeGaji.getUangLembur()));
            uangMakanTextField.setText(String.valueOf(activeGaji.getUangMakan()));
            simpanButton.setText("Update");
            simpanButton.setMnemonic('U');
            simpanButton.setEnabled(true);
            hapusButton.setEnabled(true);
            kodeGolonganCombo.requestFocus();

        } else {
            gajiPokokTextField.setText(null);
            uangLemburTextField.setText(null);
            uangMakanTextField.setText(null);
            gajiPokokTextField.requestFocus();
            hapusButton.setEnabled(false);
            simpanButton.setText("Simpan");
            simpanButton.setMnemonic('S');
            simpanButton.setEnabled(true);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_kodeGolonganComboActionPerformed

    private void batalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalButtonActionPerformed
        kodeGolonganCombo.removeAllItems();
        nipCombo.removeAllItems();
        kodeGolonganCombo.requestFocus();
        List<Gaji> gajis = null;
        try {
            gajis = DaoFactory.getGajiDao().getAllGaji();
        } catch (SQLException ex) {
            Logger.getLogger(GajiForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        String checkerDuplication = null;
        for (Gaji g : gajis) {
            if (!g.getGolongan().getKodeGolongan().equals(checkerDuplication)) {
                kodeGolonganCombo.addItem(g.getGolongan().getKodeGolongan());
                checkerDuplication = g.getGolongan().getKodeGolongan();
            }

        }
        List<Gaji> gajis2 = null;
        try {
            gajis2 = DaoFactory.getGajiDao().getAllGajiByGolongan(String.valueOf(kodeGolonganCombo.getSelectedItem()));
        } catch (SQLException ex) {
            Logger.getLogger(GajiForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        nipCombo.removeAllItems();
        GajiTableModel model = new GajiTableModel(gajis2);
        gajiTable.setModel(model);
        for (Gaji g : gajis2) {
            nipCombo.addItem(g.getKaryawan().getNip());
        }
}//GEN-LAST:event_batalButtonActionPerformed

    private void gajiPokokTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gajiPokokTextFieldActionPerformed
        simpanButton.setEnabled(true);
        simpanButton.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_gajiPokokTextFieldActionPerformed

    private void nipComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nipComboActionPerformed
        // TODO add your handling code here:
        String pilih = String.valueOf(kodeGolonganCombo.getSelectedItem());
        String pilih2 = String.valueOf(nipCombo.getSelectedItem());

        try {
            activeGaji = DaoFactory.getGajiDao().getByKodeGolonganAndNip(pilih, pilih2);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //jika ditemukan
        if (activeGaji != null) {
            gajiPokokTextField.setText(String.valueOf(activeGaji.getGajiPokok()));
            uangLemburTextField.setText(String.valueOf(activeGaji.getUangLembur()));
            uangMakanTextField.setText(String.valueOf(activeGaji.getUangMakan()));
            simpanButton.setText("Update");
            simpanButton.setMnemonic('U');
            simpanButton.setEnabled(true);
            hapusButton.setEnabled(true);
            kodeGolonganCombo.requestFocus();

        } else {
            gajiPokokTextField.setText(null);
            uangLemburTextField.setText(null);
            uangMakanTextField.setText(null);
            gajiPokokTextField.requestFocus();
            hapusButton.setEnabled(false);
            simpanButton.setText("Simpan");
            simpanButton.setMnemonic('S');
            simpanButton.setEnabled(true);
        }
    }//GEN-LAST:event_nipComboActionPerformed

    private void uangMakanTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uangMakanTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uangMakanTextFieldActionPerformed

    private void uangLemburTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uangLemburTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uangLemburTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new NimbusLookAndFeel());
            //UIManager.setLookAndFeel(new smooth.windows.SmoothLookAndFeel());

        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GajiForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new GajiForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(GajiForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batalButton;
    private javax.swing.JButton cmdKeluar;
    private javax.swing.JLabel fungsiLabel;
    private javax.swing.JPanel gajiPanel;
    private javax.swing.JLabel gajiPokokLabel;
    private javax.swing.JTextField gajiPokokTextField;
    private javax.swing.JTable gajiTable;
    private javax.swing.JButton hapusButton;
    private javax.swing.JPanel headPanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox kodeGolonganCombo;
    private javax.swing.JLabel kodeGolonganLabel;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JComboBox nipCombo;
    private javax.swing.JLabel nipLabel;
    private com.sistem.panelstatus.PanelStatus panelStatus1;
    private javax.swing.JButton simpanButton;
    private javax.swing.JLabel uangLemburLabel;
    private javax.swing.JTextField uangLemburTextField;
    private javax.swing.JLabel uangMakanLabel;
    private javax.swing.JTextField uangMakanTextField;
    // End of variables declaration//GEN-END:variables
}
